{
  "Path": "github.com/metakeule/dep/depcore",
  "Exports": {
    "*Environment.CheckIntegrity": "(*Environment) CheckIntegrity() map[string]map[string][3]string",
    "*Environment.Close": "(*Environment) Close()",
    "*Environment.Diff": "(*Environment) Diff(*github.com/metakeule/gdf#Package,bool)(*pkgDiff,error)",
    "*Environment.Get": "(*Environment) Get(string,(...*gdf.Package) bool)(map[string]map[string][3]string,error)",
    "*Environment.HasRevFile": "(*Environment) HasRevFile(string) bool",
    "*Environment.Init": "(*Environment) Init() map[string]map[string][3]string",
    "*Environment.Lint": "(*Environment) Lint(*github.com/metakeule/gdf#Package) error",
    "*Environment.NumPkgsInRegistry": "(*Environment) NumPkgsInRegistry() int",
    "*Environment.Open": "(*Environment) Open()",
    "*Environment.Register": "(*Environment) Register(bool,*github.com/metakeule/gdf#Package) error",
    "*Environment.RevFile": "(*Environment) RevFile(string) string",
    "*Environment.Track": "(*Environment) Track(*github.com/metakeule/gdf#Package,bool)([]byte,error)",
    "*Environment.UnRegister": "(*Environment) UnRegister(string) error",
    "*testEnv.Get": "(*testEnv) Get(string,string) error",
    "*testEnv.Update": "(*testEnv) Update(string,string) error",
    "Environment": "type Environment struct {;   *github.com/metakeule/gdf#Environment;  IgnorePkgs map[string]bool;  TMPDIR string;}",
    "NewEnv": "NewEnv(string) *Environment",
    "NewTestEnv": "NewTestEnv() *testEnv",
    "VERBOSE": "VERBOSE bool"
  },
  "Imports": {
    "github.com/mattn/go-sqlite3#*SQLiteDriver.Open": "(*SQLiteDriver) Open(string)(driver.Conn,error)",
    "github.com/mattn/go-sqlite3#SQLiteDriver": "type SQLiteDriver struct {;  ConnectHook (*SQLiteConn) error;  Extensions []string;}",
    "github.com/metakeule/dbwrap#*Wrapper.Open": "(*Wrapper) Open(string)(driver.Conn,error)",
    "github.com/metakeule/dbwrap#New": "New(string,driver.Driver) *Wrapper",
    "github.com/metakeule/dbwrap#Wrapper": "type Wrapper struct {;   driver.Driver;  AfterAll (driver.Conn,string,...interface{});  BeforeAll (driver.Conn,string,...interface{});  HandleBegin (driver.Conn)(driver.Tx,error);  HandleClose (driver.Conn) error;  HandleExec (driver.Execer,string,[]driver.Value)(driver.Result,error);  HandleOpen (string,driver.Conn)(driver.Conn,error);  HandlePrepare (driver.Conn,string)(driver.Stmt,error);  HandleQuery (driver.Queryer,string,[]driver.Value)(driver.Rows,error);}",
    "github.com/metakeule/gdf#*Environment.Build": "(*Environment) Build() *build.Context",
    "github.com/metakeule/gdf#*Environment.LoadJson": "(*Environment) LoadJson([]byte)(*Package,error)",
    "github.com/metakeule/gdf#*Environment.MustPkg": "(*Environment) MustPkg(string) *Package",
    "github.com/metakeule/gdf#*Environment.Pkg": "(*Environment) Pkg(string)(*Package,error)",
    "github.com/metakeule/gdf#*Environment.PkgDir": "(*Environment) PkgDir(string)(string,bool,error)",
    "github.com/metakeule/gdf#*Environment.PkgExists": "(*Environment) PkgExists(string) bool",
    "github.com/metakeule/gdf#*Environment.PkgExternalPath": "(*Environment) PkgExternalPath(string) string",
    "github.com/metakeule/gdf#*Environment.PkgInternalPath": "(*Environment) PkgInternalPath(string) string",
    "github.com/metakeule/gdf#*Environment.PkgIsInternal": "(*Environment) PkgIsInternal(string)(bool,error)",
    "github.com/metakeule/gdf#*Environment.PkgPath": "(*Environment) PkgPath(string) string",
    "github.com/metakeule/gdf#*Package.Exists": "(*Package) Exists() bool",
    "github.com/metakeule/gdf#*Package.JsonMd5": "(*Package) JsonMd5() string",
    "github.com/metakeule/gdf#Environment": "type Environment struct {;  GOPATH string;  GOROOT string;}",
    "github.com/metakeule/gdf#NewEnv": "NewEnv(string,string) *Environment",
    "github.com/metakeule/gdf#Package": "type Package struct {;  Dir string;  Env *Environment;  Exports map[string]string;  ImportedPackages map[string]bool;  Imports map[string]string;  InitMd5 string;  Internal bool;  Path string;  RawExports map[string]declaration;  RawImports map[string]declaration;  RawInits map[string]string;  RawMethods map[[2]string]*FuncDecl;}"
  },
  "InitMd5": "425fd4e3d96d0aa47519ca07a1bc7523"
}
