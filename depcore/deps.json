[
   {
      "Path": "github.com/metakeule/dep/depcore",
      "Exports": {
         "CLICheckout": "CLICheckout(string,bool,*Environment) ErrorCode",
         "CLIRegister": "CLIRegister(*Environment,...*exports.Package) ErrorCode",
         "Cleanup": "Cleanup()",
         "Environment": "type Environment struct {;   *github.com/metakeule/exports#Environment;  TMPDIR string;}",
         "ErrorCode": "type ErrorCode int",
         "ErrorCode.Error": "(ErrorCode) Error() string",
         "ErrorCodeInfos": "ErrorCodeInfos map[ErrorCode]string = map[ErrorCode]string{}",
         "ErrorDEPTMPNotSet": "ErrorDEPTMPNotSet",
         "ErrorDependancyInfosCorrupt": "ErrorDependancyInfosCorrupt",
         "ErrorDependancyNotInGOPATH": "ErrorDependancyNotInGOPATH",
         "ErrorDependancyNotInPackageDir": "ErrorDependancyNotInPackageDir",
         "ErrorDirNotAPackage": "ErrorDirNotAPackage",
         "ErrorGOPATHInvalid": "ErrorGOPATHInvalid",
         "ErrorGOPATHNotSet": "ErrorGOPATHNotSet",
         "ErrorGOROOTNotSet": "ErrorGOROOTNotSet ErrorCode = iota",
         "ErrorInvalidOptions": "ErrorInvalidOptions",
         "ErrorPackageInternal": "ErrorPackageInternal",
         "ErrorPackageInvalid": "ErrorPackageInvalid",
         "ErrorPackageNotInGOPATH": "ErrorPackageNotInGOPATH",
         "ErrorUpdateConflict": "ErrorUpdateConflict",
         "NewEnv": "NewEnv(string) *Environment",
         "SubPackages": "SubPackages(*github.com/metakeule/exports#Package)([]*github.com/metakeule/exports#Package,error)",
         "TestCleanup": "TestCleanup()",
         "TestGet": "TestGet(string,string) error",
         "TestUpdate": "TestUpdate(string,string) error"
      },
      "Imports": {
         "github.com/metakeule/dep/db#*DB.Close": "(*DB) Close() error",
         "github.com/metakeule/dep/db#*DB.Open": "(*DB) Open()(*DB,error)",
         "github.com/metakeule/dep/db#CreateTables": "CreateTables(*DB)",
         "github.com/metakeule/dep/db#DB": "type DB struct {;   *sql.DB;  File string;  Opened bool;}",
         "github.com/metakeule/dep/db#Exp": "type Exp struct {;  Name string;  Package string;  Value string;}",
         "github.com/metakeule/dep/db#GetImported": "GetImported(*DB,string)([]*Imp,error)",
         "github.com/metakeule/dep/db#Imp": "type Imp struct {;  Import string;  Name string;  Package string;  Value string;}",
         "github.com/metakeule/dep/db#InsertPackages": "InsertPackages(*DB,[]*Pkg,[]*Exp,[]*Imp) error",
         "github.com/metakeule/dep/db#Open": "Open(string)(*DB,error)",
         "github.com/metakeule/dep/db#Pkg": "type Pkg struct {;  ExportsMd5 string;  ImportsMd5 string;  InitMd5 string;  Json []byte;  JsonMd5 string;  Package string;}",
         "github.com/metakeule/exports#*Environment.Build": "(*Environment) Build() *build.Context",
         "github.com/metakeule/exports#*Environment.LoadJson": "(*Environment) LoadJson([]byte)(*Package,error)",
         "github.com/metakeule/exports#*Environment.Pkg": "(*Environment) Pkg(string) *Package",
         "github.com/metakeule/exports#*Environment.PkgDir": "(*Environment) PkgDir(string) string",
         "github.com/metakeule/exports#*Environment.PkgExists": "(*Environment) PkgExists(string) bool",
         "github.com/metakeule/exports#*Environment.PkgIsInternal": "(*Environment) PkgIsInternal(string) bool",
         "github.com/metakeule/exports#*Environment.PkgPath": "(*Environment) PkgPath(string) string",
         "github.com/metakeule/exports#*Package.Dir": "(*Package) Dir()(string,bool)",
         "github.com/metakeule/exports#*Package.Exists": "(*Package) Exists() bool",
         "github.com/metakeule/exports#Environment": "type Environment struct {;  GOPATH string;  GOROOT string;}",
         "github.com/metakeule/exports#NewEnv": "NewEnv(string,string) *Environment",
         "github.com/metakeule/exports#Package": "type Package struct {;  Env *Environment;  Exports map[string]string;  ImportedPackages map[string]bool;  Imports map[string]string;  InitMd5 string;  Internal bool;  Path string;  RawExports map[string]declaration;  RawImports map[string]declaration;  RawInits map[string]string;  RawMethods map[[2]string]*FuncDecl;}"
      },
      "InitMd5": "3adce1226cf9333d99df043b9e792eb0"
   }
]
