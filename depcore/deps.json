[
   {
      "Path": "github.com/metakeule/dep/depcore",
      "Exports": {
         "*Environment.CLICheckout": "(*Environment) CLICheckout(string,bool) ErrorCode",
         "*Environment.CLIDiff": "(*Environment) CLIDiff(*github.com/metakeule/exports#Package)(*pkgDiff,ErrorCode)",
         "*Environment.CLIGet": "(*Environment) CLIGet(*github.com/metakeule/exports#Package,...string) ErrorCode",
         "*Environment.CLIInstall": "(*Environment) CLIInstall(*github.com/metakeule/exports#Package,...string) ErrorCode",
         "*Environment.CLIRegister": "(*Environment) CLIRegister(*github.com/metakeule/exports#Package) ErrorCode",
         "*Environment.CLIRevisions": "(*Environment) CLIRevisions(*github.com/metakeule/exports#Package,bool)([]byte,error)",
         "*Environment.CLIShow": "(*Environment) CLIShow(...*exports.Package) string",
         "*Environment.CLIUpdate": "(*Environment) CLIUpdate(*github.com/metakeule/exports#Package,string)(map[string]map[string][3]string,error)",
         "*Environment.Close": "(*Environment) Close()",
         "*Environment.NewTentative": "(*Environment) NewTentative() *tentativeEnvironment",
         "*Environment.Open": "(*Environment) Open()",
         "*tentativeEnvironment.Close": "(*tentativeEnvironment) Close()",
         "*testEnv.Get": "(*testEnv) Get(string,string) error",
         "*testEnv.Update": "(*testEnv) Update(string,string) error",
         "Cleanup": "Cleanup()",
         "DEBUG": "DEBUG false = false",
         "Environment": "type Environment struct {;   *github.com/metakeule/exports#Environment;  DB *db;  TMPDIR string;}",
         "ErrorCode": "type ErrorCode int",
         "ErrorCode.Error": "(ErrorCode) Error() string",
         "ErrorCodeInfos": "ErrorCodeInfos map[ErrorCode]string = map[ErrorCode]string{}",
         "ErrorDEPTMPNotSet": "ErrorDEPTMPNotSet",
         "ErrorDependancyInfosCorrupt": "ErrorDependancyInfosCorrupt",
         "ErrorDependancyNotInGOPATH": "ErrorDependancyNotInGOPATH",
         "ErrorDependancyNotInPackageDir": "ErrorDependancyNotInPackageDir",
         "ErrorDirNotAPackage": "ErrorDirNotAPackage",
         "ErrorGOPATHInvalid": "ErrorGOPATHInvalid",
         "ErrorGOPATHNotSet": "ErrorGOPATHNotSet",
         "ErrorGOROOTNotSet": "ErrorGOROOTNotSet",
         "ErrorInvalidOptions": "ErrorInvalidOptions",
         "ErrorPackageInternal": "ErrorPackageInternal",
         "ErrorPackageInvalid": "ErrorPackageInvalid",
         "ErrorPackageNotInGOPATH": "ErrorPackageNotInGOPATH",
         "ErrorUpdateConflict": "ErrorUpdateConflict",
         "NewEnv": "NewEnv(string) *Environment",
         "NewTestEnv": "NewTestEnv() *testEnv",
         "SubPackages": "SubPackages(*github.com/metakeule/exports#Package)([]*github.com/metakeule/exports#Package,error)"
      },
      "Imports": {
         "github.com/mattn/go-sqlite3#*SQLiteDriver.Open": "(*SQLiteDriver) Open(string)(driver.Conn,error)",
         "github.com/mattn/go-sqlite3#SQLiteDriver": "type SQLiteDriver struct {;  ConnectHook (*SQLiteConn) error;  Extensions []string;}",
         "github.com/metakeule/dbwrap#*Wrapper.Open": "(*Wrapper) Open(string)(driver.Conn,error)",
         "github.com/metakeule/dbwrap#New": "New(string,driver.Driver) *Wrapper",
         "github.com/metakeule/dbwrap#Wrapper": "type Wrapper struct {;   driver.Driver;  AfterAll (driver.Conn,string,...interface{});  BeforeAll (driver.Conn,string,...interface{});  HandleBegin (driver.Conn)(driver.Tx,error);  HandleClose (driver.Conn) error;  HandleExec (driver.Execer,string,[]driver.Value)(driver.Result,error);  HandleOpen (string,driver.Conn)(driver.Conn,error);  HandlePrepare (driver.Conn,string)(driver.Stmt,error);  HandleQuery (driver.Queryer,string,[]driver.Value)(driver.Rows,error);}",
         "github.com/metakeule/exports#*Environment.Build": "(*Environment) Build() *build.Context",
         "github.com/metakeule/exports#*Environment.LoadJson": "(*Environment) LoadJson([]byte)(*Package,error)",
         "github.com/metakeule/exports#*Environment.Pkg": "(*Environment) Pkg(string) *Package",
         "github.com/metakeule/exports#*Environment.PkgDir": "(*Environment) PkgDir(string) string",
         "github.com/metakeule/exports#*Environment.PkgExists": "(*Environment) PkgExists(string) bool",
         "github.com/metakeule/exports#*Environment.PkgIsInternal": "(*Environment) PkgIsInternal(string) bool",
         "github.com/metakeule/exports#*Environment.PkgPath": "(*Environment) PkgPath(string) string",
         "github.com/metakeule/exports#*Package.Dir": "(*Package) Dir()(string,bool)",
         "github.com/metakeule/exports#*Package.Exists": "(*Package) Exists() bool",
         "github.com/metakeule/exports#Environment": "type Environment struct {;  GOPATH string;  GOROOT string;}",
         "github.com/metakeule/exports#Hash": "Hash(string) string",
         "github.com/metakeule/exports#NewEnv": "NewEnv(string,string) *Environment",
         "github.com/metakeule/exports#Package": "type Package struct {;  Env *Environment;  Exports map[string]string;  ImportedPackages map[string]bool;  Imports map[string]string;  InitMd5 string;  Internal bool;  Path string;  RawExports map[string]declaration;  RawImports map[string]declaration;  RawInits map[string]string;  RawMethods map[[2]string]*FuncDecl;}"
      },
      "InitMd5": "b54df8630bc72ee6a819fe60de3c2738"
   }
]
